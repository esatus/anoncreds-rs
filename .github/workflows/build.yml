name: 'Build Packages'

'on':
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish packages'
        required: true
        default: 'false'

jobs:
  build-manylinux:
    name: Build Library (Manylinux)

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            lib: libanoncreds.so
            container: andrewwhitehead/manylinux2014-base

    container: ${{ matrix.container }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1

      - name: Build library
        env:
          BUILD_FEATURES: vendored
          BUILD_TARGET: ${{ matrix.target }}
        run: sh ./build.sh

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: target/release/${{ matrix.lib }}

  build-other:
    name: Build Library (MacOS/Win)

    strategy:
      matrix:
        include:
          - os: macos-11
            lib: libanoncreds.dylib
            target: apple-darwin
            toolchain: beta # beta required for Darwin build
          - os: windows-latest
            lib: anoncreds.dll
            toolchain: stable

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1

      # pre-build so that openssl dependency is cached, otherwise it will complain:
      # "This perl implementation doesn't produce Windows like paths"
      - if: "runner.os == 'Windows'"
        name: Pre-build (Windows)
        uses: actions-rs/cargo@v1
        env:
          OPENSSL_STATIC: 1
        with:
          command: build
          args: --release --manifest-path anoncreds/Cargo.toml --features vendored

      - name: Build library
        env:
          BUILD_FEATURES: vendored
          BUILD_TARGET: ${{ matrix.target }}
          BUILD_TOOLCHAIN: ${{ matrix.toolchain }}
          OPENSSL_STATIC: 1
        run: sh ./build.sh

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: target/release/${{ matrix.lib }}

  build-py:
    name: Build Python
    needs: [build-manylinux, build-other]

    strategy:
      matrix:
        os: [ubuntu-latest, macos-11, windows-latest]
        python-version: [3.6]
        include:
          - os: ubuntu-latest
            plat-name: manylinux2014_x86_64
          - os: macos-11
            plat-name: macosx_10_9_universal2 # macosx_10_9_x86_64
          - os: windows-latest
            plat-name: win_amd64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine auditwheel

      - name: Fetch library artifacts
        uses: actions/download-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: wrappers/python/indy_credx/

      - name: Build python package
        run: |
          python setup.py bdist_wheel --python-tag=py3 --plat-name=${{ matrix.plat-name }}
        working-directory: wrappers/python

      - name: Test python package
        shell: sh
        run: |
          cd wrappers/python
          pip install --upgrade pip
          pip install dist/*
          python -m demo.test

      - if: "runner.os == 'Linux'"
        name: Auditwheel
        run: auditwheel show wrappers/python/dist/*

      - name: Upload python package
        uses: actions/upload-artifact@v2
        with:
          name: python-${{ runner.os }}
          path: wrappers/python/dist/*

      - if: |
          (github.event_name == 'release' ||
            (github.event_name == 'workflow_dispatch' &&
             github.event.inputs.publish == 'true'))
        name: Publish python package
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload --skip-existing wrappers/python/dist/*

  build-android-libraries:
    name: Build Android Libraries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          [
            aarch64-linux-android,
            armv7-linux-androideabi,
            i686-linux-android,
            x86_64-linux-android,
          ]

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.architecture }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{matrix.architecture}} --package=anoncreds --features=vendored
      - uses: actions/upload-artifact@v2
        name: Save library
        with:
          name: ${{matrix.architecture}}
          path: target/${{matrix.architecture}}/release/libanoncreds.so

  create-android-library:
    name: Create android libraries
    runs-on: ubuntu-latest
    needs: build-android-libraries
    if: |
      (github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.publish == 'true'))
    steps:
      - name: Fetch libraries
        uses: actions/download-artifact@v3
      - run: |
          sudo mkdir ./libs
          sudo mv aarch64-linux-android   ./libs/arm64-v8a
          sudo mv armv7-linux-androideabi ./libs/armeabi-v7a
          sudo mv i686-linux-android      ./libs/x86
          sudo mv x86_64-linux-android    ./libs/x86_64
      - name: Save Android library
        uses: actions/upload-artifact@v2
        with:
          name: android-libs
          path: ./libs
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            aarch64-linux-android
            armv7-linux-androideabi
            i686-linux-android
            x86_64-linux-android
          failOnError: false

  build-ios-libraries:
    name: Build ios Libraries
    runs-on: macos-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: true
    strategy:
      matrix:
        architecture:
          [aarch64-apple-ios, aarch64-apple-ios-sim, x86_64-apple-ios]

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.architecture }}
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{matrix.architecture}} --package=anoncreds --features=vendored
      - uses: actions/upload-artifact@v2
        name: Save library
        with:
          name: ${{matrix.architecture}}
          path: target/${{matrix.architecture}}/release/libanoncreds.dylib

  create-ios-xcframework:
    name: Create ios xcframework
    runs-on: macos-latest
    needs: build-ios-libraries
    if: |
      (github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.publish == 'true'))

    steps:
      - uses: actions/checkout@v2
      - name: Fetch static libraries
        uses: actions/download-artifact@v3
      - run: >
          lipo -create aarch64-apple-ios-sim/libanoncreds.dylib \
                       x86_64-apple-ios/libanoncreds.dylib \
               -output libanoncreds.dylib
      - run: >
          xcodebuild -create-xcframework \
            -library aarch64-apple-ios/libanoncreds.dylib -headers include/libanoncreds.h \
            -library libanoncreds.dylib                   -headers include/libanoncreds.h \
            -output anoncreds.xcframework
      - name: Save xcframework
        uses: actions/upload-artifact@v3
        with:
          name: anoncreds.xcframework
          path: anoncreds.xcframework
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            aarch64-apple-ios
            aarch64-apple-ios-sim
            x86_64-apple-ios
          failOnError: false
